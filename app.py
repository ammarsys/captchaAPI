"""
A lightweight Captcha API made with Flask. This version is a new, fast and completely rewritten API,
originally by Vixen, which was discontinued.

The website is located at https://captchaAPI.pythonanywhere.com/

License: MIT
"""

# Standard library imports

import secrets
import datetime
import base64
from typing import Callable
from io import BytesIO

# Related third party imports
from flask import Flask, send_file, render_template, jsonify, redirect, request
from flask_cors import CORS
from PIL import ImageDraw, Image, ImageFont
import random
import expiringdict

# Local application/library specific imports
from utils import noise

app = Flask(__name__)
CORS(app)
captchas = expiringdict.ExpiringDict(max_age_seconds=120, max_len=float("inf"))


class CaptchaCount:
    """
    A class for counting captchas to prevent duplicates in the captchas dictionary.
    """

    count: int = 0


fonts_lower = [
    ImageFont.truetype("./fonts/lower/gadugib.ttf", 32),
    ImageFont.truetype("./fonts/lower/Chalkduster_400.ttf", 32),
    ImageFont.truetype("./fonts/lower/ShadowsIntoLight-Regular.ttf", 32),
    ImageFont.truetype("./fonts/lower/Rajdhani-SemiBold.ttf", 32),
]
fonts_upper = [
    ImageFont.truetype("./fonts/upper/arial.ttf", 55),
    ImageFont.truetype("./fonts/upper/FallingSky-JKwK.ttf", 55),
    ImageFont.truetype("./fonts/upper/TrainOne-Regular.ttf", 55),
    ImageFont.truetype("./fonts/upper/BebasNeue-Regular.ttf", 55),
]


def id_generator(y: int, choice: Callable) -> str:
    """
    Generates a captcha ID string of length 'y' using a given 'choice' function.

    Args:
    y (int): The length of the captcha ID string to be generated.
    choice (callable): A callable function to be used for generating the captcha ID.
        It could be either a cryptographically secure module for secure use cases or a random module for other use cases.

    Returns:
    str: The captcha ID string of length 'y' generated by calling the 'choice' function on the given sequence of characters.
    """

    string = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKMNOPQRSTUVWXYZ"
    return "".join(choice(string) for _ in range(y))


def cap_gen(text: str) -> Image.Image:
    """
    Generates an image of a captcha using the given 'text'.

    Args:
        text (str): The captcha text to be used for generating the captcha image.

    Returns:
        Image.Image: An image of the captcha generated using the given 'text'.
    """
    white = 255, 255, 255
    space, height = random.randint(5, 10), random.randint(5, 10)

    corresponding_font = {
        let: random.choice(fonts_upper if let.isupper() else fonts_lower)
        for let in text
    }
    text_positions = []

    img = Image.new("RGB", (300, 100), color=(128, 128, 128))
    img.load()

    d = noise.add_noise_lines(ImageDraw.Draw(img))

    for count, letter in enumerate(text):
        cords = space, height
        d.text(cords, f"{letter}", fill=white, font=corresponding_font[letter])

        space += secrets.choice(range(35, 45))
        height += secrets.choice(range(1, 11))

        text_positions.append(tuple(secrets.randbelow(10) + 15 + i for i in cords))

    value = secrets.randbelow(len(text_positions))
    for i in range(len(text_positions) - value):
        d.line((text_positions[i], text_positions[i + value]), fill=white, width=0)

    return img


@app.route("/api/cdn/<key>")
def get_img(key: str):
    """
    A Content Delivery Network (CDN) for serving captcha images.

    Args:
        key (str): The captcha identifier for which the image needs to be served.

    Returns:
        PIL.Image.Image: The captcha image corresponding to the given identifier.

    """

    try:
        if captchas[key][3] >= captchas[key][4]:
            del captchas[key]

        captchas[key][3] += 1

        if not captchas[key][1]:
            pil_image = noise.salt_and_pepper(cap_gen(text=captchas[key][0]), prob=0.13)
            captchas[key][1] = pil_image
        else:
            pil_image = captchas[key][1]

        output = BytesIO()
        pil_image.convert("RGBA").save(output, format="PNG")
        output.seek(0, 0)

        return send_file(output, mimetype="image/png", as_attachment=False)

    except KeyError:
        return redirect("/")


@app.route("/api/img")
def api_captcha():
    """
    Endpoint for creating a dictionary key with the captcha ID and its related information.

    Args:
        access (int): The number of times the captcha image can be accessed before it is wiped from the dictionary.

    Returns:
        dict: A JSON dictionary containing the captcha ID and its related information.

    """

    access = request.args.get("requests", default=10, type=int)

    if access > 20:
        return redirect("/")

    delta = datetime.timedelta(minutes=5)
    now = datetime.datetime.utcnow()

    solution = id_generator(y=secrets.choice((4, 5)), choice=secrets.choice)

    id_ = base64.b64encode(
        bytes(
            f'{CaptchaCount.count}.{id_generator(y=10, choice=random.choice)}.{now.strftime("%S")[-5:]}',
            "utf-8",
        )
    ).decode()

    captchas[id_] = [solution, None, now + delta, 0, access]
    CaptchaCount.count += 1

    return jsonify(
        {"solution": solution, "url": f"http://127.0.0.1:5000/api/cdn/{id_}"}
    )


@app.route("/examples")
def examples():
    """API examples endpoint"""
    return render_template("examples.html")


@app.route("/")
def home():
    """API home"""
    return render_template("index.html")


@app.errorhandler(404)
def not_found(e):
    """404 error handling"""
    return redirect("/")


if __name__ == "__main__":
    app.run(debug=True)
