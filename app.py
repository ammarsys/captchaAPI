"""
A lightweight Captcha API made with Flask. This version is a new, fast and completely rewritten API,
originally by Vixen, which was discontinued.

The website is located at https://captchaAPI.pythonanywhere.com/

License: MIT
"""

import secrets
import datetime
import random
import base64
import os
from typing import Callable
from io import BytesIO
from urllib.parse import urljoin

from flask import Flask, send_file, render_template, jsonify, redirect, request
from flask_cors import CORS

from utils import noise, cap_gen, TTLCache

app = Flask(__name__)
app.captcha_count = 0

CORS(app)
captchas: TTLCache[str, list] = TTLCache(ttl=30)


def id_generator(y: int) -> str:
    """
    Generates a captcha ID string of length 'y'.

    Args:
        y (int): The length of the captcha ID string to be generated.

    Returns:
        str: The captcha ID string of length 'y' generated by calling the 'choice' function on the given sequence of characters.

    """
    string = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKMNOPQRSTUVWXYZ"
    return "".join(secrets.choice(string) for _ in range(y))


@app.route("/api/cdn/<key>")
def get_img(key: str):
    """
    A Content Delivery Network (CDN) for serving captcha images.

    Args:
        key (str): The captcha identifier for which the image needs to be served.

    Returns:
        PIL.Image.Image: The captcha image corresponding to the given identifier.

    """
    try:
        if captchas[key][3] >= captchas[key][4]:
            del captchas[key]

        captchas[key][3] += 1

        if not captchas[key][1]:
            pil_image = noise.salt_and_pepper(cap_gen(text=captchas[key][0]), prob=0.13)
            captchas[key][1] = pil_image
        else:
            pil_image = captchas[key][1]

        output = BytesIO()
        pil_image.convert("RGBA").save(output, format="PNG")
        output.seek(0, 0)

        return send_file(output, mimetype="image/png", as_attachment=False)

    except KeyError:
        return redirect("/")


@app.route("/api/img")
def api_captcha():
    """
    Endpoint for creating a dictionary key with the captcha ID and its related information. This route has an argument
    which indicates times the captcha image can be accessed before it is wiped from the dictionary.

    Returns:
        dict: A JSON dictionary containing the captcha ID and its related information.

    """
    access = request.args.get("requests", default=10, type=int)

    if access > 20:
        return redirect("/")

    delta = datetime.timedelta(minutes=5)
    now = datetime.datetime.utcnow()

    solution = id_generator(y=secrets.choice((4, 5)))

    id_ = base64.b64encode(
        bytes(
            f'{app.captcha_count}.{id_generator(y=10)}.{now.strftime("%S")[-5:]}',
            "utf-8",
        )
    ).decode()

    captchas[id_] = [solution, None, now + delta, 0, access]
    app.captcha_count += 1

    return jsonify(
        {"solution": solution, "url": urljoin(request.host_url, f"/api/cdn/{id_}")}
    )


@app.route("/examples")
def examples():
    """API examples endpoint"""
    return render_template("examples.html")


@app.route("/")
def home():
    """API home"""
    return render_template("index.html")


@app.errorhandler(404)
def not_found(_):
    """404 error handling"""
    return redirect("/")


if __name__ == "__main__":
    app.run()
